--- route.h.orig	2010-10-11 08:21:47.000000000 +0900
+++ route.h	2010-10-11 10:10:09.000000000 +0900
@@ -88,23 +88,23 @@
 
 /* MRT compile-time constants */
 #ifdef _KERNEL
- #ifndef ROUTETABLES
-  #define RT_NUMFIBS 1
-  #define RT_MAXFIBS 1
- #else
-  /* while we use 4 bits in the mbuf flags, we are limited to 16 */
-  #define RT_MAXFIBS 16
-  #if ROUTETABLES > RT_MAXFIBS
-   #define RT_NUMFIBS RT_MAXFIBS
-   #error "ROUTETABLES defined too big"
-  #else
-   #if ROUTETABLES == 0
-    #define RT_NUMFIBS 1
-   #else
-    #define RT_NUMFIBS ROUTETABLES
-   #endif
-  #endif
- #endif
+#ifndef ROUTETABLES
+#define RT_NUMFIBS 1
+#define RT_MAXFIBS 1
+#else
+/* while we use 4 bits in the mbuf flags, we are limited to 16 */
+#define RT_MAXFIBS 16
+#if ROUTETABLES > RT_MAXFIBS
+#define RT_NUMFIBS RT_MAXFIBS
+#error "ROUTETABLES defined too big"
+#else
+#if ROUTETABLES == 0
+#define RT_NUMFIBS 1
+#else
+#define RT_NUMFIBS ROUTETABLES
+#endif
+#endif
+#endif
 #endif
 
 extern u_int rt_numfibs;	/* number fo usable routing tables */
@@ -124,13 +124,18 @@
  * gateway rather than the ultimate destination.
  */
 #ifndef RNF_NORMAL
-#include <net/radix.h>
+#include <net/ptree.h>
 #ifdef RADIX_MPATH
 #include <net/radix_mpath.h>
+#endif /* RADIX_MPATH */
+#endif /* RNF_NORMAL */
+
+#ifdef PTREE_MPATH
+#define MAX_MPATH 10
 #endif
-#endif
+
 struct rtentry {
-	struct	radix_node rt_nodes[2];	/* tree glue, and other values */
+	struct	ptree_node rt_nodes[2];	/* tree glue, and other values */
 	/*
 	 * XXX struct rtentry must begin with a struct radix_node (or two!)
 	 * because the code does some casts of a 'struct radix_node *'
@@ -145,10 +150,14 @@
 	struct	ifaddr *rt_ifa;		/* the answer: interface address to use */
 	struct	rt_metrics_lite rt_rmx;	/* metrics used by rx'ing protocols */
 	u_int	rt_fibnum;		/* which FIB */
+
 #ifdef _KERNEL
 	/* XXX ugly, user apps use this definition but don't have a mtx def */
 	struct	mtx rt_mtx;		/* mutex for routing entry */
 #endif
+#ifdef PTREE_MPATH
+	struct rtentry	*mlist[MAX_MPATH];	/* multi path list */
+#endif
 };
 
 /*
@@ -197,7 +206,7 @@
 #define	RTF_LOCAL	0x200000 	/* route represents a local address */
 #define	RTF_BROADCAST	0x400000	/* route represents a bcast address */
 #define	RTF_MULTICAST	0x800000	/* route represents a mcast address */
-					/* 0x8000000 and up unassigned */
+/* 0x8000000 and up unassigned */
 #define	RTF_STICKY	 0x10000000	/* always route dst->src */
 
 #define	RTF_RNH_LOCKED	 0x40000000	/* radix node head is locked */
@@ -313,9 +322,9 @@
  * The case sa_len == 0 should only apply to empty structures.
  */
 #define SA_SIZE(sa)						\
-    (  (!(sa) || ((struct sockaddr *)(sa))->sa_len == 0) ?	\
-	sizeof(long)		:				\
-	1 + ( (((struct sockaddr *)(sa))->sa_len - 1) | (sizeof(long) - 1) ) )
+	(  (!(sa) || ((struct sockaddr *)(sa))->sa_len == 0) ?	\
+	   sizeof(long)		:				\
+	   1 + ( (((struct sockaddr *)(sa))->sa_len - 1) | (sizeof(long) - 1) ) )
 
 #ifdef _KERNEL
 
@@ -330,20 +339,20 @@
 #define	RT_ADDREF(_rt)	do {					\
 	RT_LOCK_ASSERT(_rt);					\
 	KASSERT((_rt)->rt_refcnt >= 0,				\
-		("negative refcnt %d", (_rt)->rt_refcnt));	\
+			("negative refcnt %d", (_rt)->rt_refcnt));	\
 	(_rt)->rt_refcnt++;					\
 } while (0)
 
 #define	RT_REMREF(_rt)	do {					\
 	RT_LOCK_ASSERT(_rt);					\
 	KASSERT((_rt)->rt_refcnt > 0,				\
-		("bogus refcnt %d", (_rt)->rt_refcnt));	\
+			("bogus refcnt %d", (_rt)->rt_refcnt));	\
 	(_rt)->rt_refcnt--;					\
 } while (0)
 
 #define	RTFREE_LOCKED(_rt) do {					\
 	if ((_rt)->rt_refcnt <= 1)				\
-		rtfree(_rt);					\
+	rtfree(_rt);					\
 	else {							\
 		RT_REMREF(_rt);					\
 		RT_UNLOCK(_rt);					\
@@ -373,7 +382,7 @@
 	}							\
 } while (0)
 
-struct radix_node_head *rt_tables_get_rnh(int, int);
+struct ptree *rt_tables_get_rnh(int, int);
 
 struct ifmultiaddr;
 
@@ -410,9 +419,9 @@
 int	 rtinit(struct ifaddr *, int, int);
 int	 rtioctl(u_long, caddr_t);
 void	 rtredirect(struct sockaddr *, struct sockaddr *,
-	    struct sockaddr *, int, struct sockaddr *);
+		struct sockaddr *, int, struct sockaddr *);
 int	 rtrequest(int, struct sockaddr *,
-	    struct sockaddr *, struct sockaddr *, int, struct rtentry **);
+		struct sockaddr *, struct sockaddr *, int, struct rtentry **);
 
 /* defaults to "all" FIBs */
 int	 rtinit_fib(struct ifaddr *, int, int);
@@ -427,9 +436,9 @@
 struct rtentry *rtalloc1_fib(struct sockaddr *, int, u_long, u_int);
 int	 rtioctl_fib(u_long, caddr_t, u_int);
 void	 rtredirect_fib(struct sockaddr *, struct sockaddr *,
-	    struct sockaddr *, int, struct sockaddr *, u_int);
+		struct sockaddr *, int, struct sockaddr *, u_int);
 int	 rtrequest_fib(int, struct sockaddr *,
-	    struct sockaddr *, struct sockaddr *, int, struct rtentry **, u_int);
+		struct sockaddr *, struct sockaddr *, int, struct rtentry **, u_int);
 int	 rtrequest1_fib(int, struct rt_addrinfo *, struct rtentry **, u_int);
 
 #include <sys/eventhandler.h>
