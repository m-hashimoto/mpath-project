--- route.c.orig	2010-09-29 12:00:30.000000000 +0900
+++ route.c	2010-09-29 12:34:58.000000000 +0900
@@ -62,6 +62,7 @@
 #include <net/radix_mpath.h>
 #endif
 
+#include <net/ptree.h>
 #include <netinet/in.h>
 #include <netinet/ip_mroute.h>
 
@@ -128,6 +129,9 @@
 static int
 sysctl_my_fibnum(SYSCTL_HANDLER_ARGS)
 {
+#ifdef DEBUG
+	printf("sysctl_my_fibnum\n");
+#endif
         int fibnum;
         int error;
  
@@ -139,27 +143,32 @@
 SYSCTL_PROC(_net, OID_AUTO, my_fibnum, CTLTYPE_INT|CTLFLAG_RD,
             NULL, 0, &sysctl_my_fibnum, "I", "default FIB of caller");
 
-static __inline struct radix_node_head **
+static __inline struct ptree **
 rt_tables_get_rnh_ptr(int table, int fam)
 {
-	struct radix_node_head **rnh;
+#ifdef DEBUG
+	printf("rt_tables_get_rnh_ptr\n");
+#endif
+	struct ptree **rnh;
 
-	KASSERT(table >= 0 && table < rt_numfibs, ("%s: table out of bounds.",
-	    __func__));
+	KASSERT(table >= 0 && table < rt_numfibs, ("%s: table out of bounds.", __func__));
 	KASSERT(fam >= 0 && fam < (AF_MAX+1), ("%s: fam out of bounds.",
 	    __func__));
 
 	/* rnh is [fib=0][af=0]. */
-	rnh = (struct radix_node_head **)V_rt_tables;
+	rnh = (struct ptree **)V_rt_tables;
 	/* Get the offset to the requested table and fam. */
 	rnh += table * (AF_MAX+1) + fam;
 
 	return (rnh);
 }
 
-struct radix_node_head *
+struct ptree *
 rt_tables_get_rnh(int table, int fam)
 {
+#ifdef DEBUG
+	printf("rt_tables_get_rnh\n");
+#endif
 
 	return (*rt_tables_get_rnh_ptr(table, fam));
 }
@@ -171,26 +180,32 @@
 static void
 route_init(void)
 {
+#ifdef DEBUG
+	printf("route_init\n");
+#endif
 
 	/* whack the tunable ints into  line. */
 	if (rt_numfibs > RT_MAXFIBS)
 		rt_numfibs = RT_MAXFIBS;
 	if (rt_numfibs == 0)
 		rt_numfibs = 1;
-	rn_init();	/* initialize all zeroes, all ones, mask table */
+	ptree_init();	/* initialize all zeroes, all ones, mask table */
 }
 SYSINIT(route_init, SI_SUB_PROTO_DOMAIN, SI_ORDER_THIRD, route_init, 0);
 
 static void
 vnet_route_init(const void *unused __unused)
 {
+#ifdef DEBUG
+	printf("vnet_route_init\n");
+#endif
 	struct domain *dom;
-	struct radix_node_head **rnh;
+	struct ptree **rnh;
 	int table;
 	int fam;
 
 	V_rt_tables = malloc(rt_numfibs * (AF_MAX+1) *
-	    sizeof(struct radix_node_head *), M_RTABLE, M_WAITOK|M_ZERO);
+	    sizeof(struct ptree *), M_RTABLE, M_WAITOK|M_ZERO);
 
 	V_rtzone = uma_zcreate("rtentry", sizeof(struct rtentry), NULL, NULL,
 	    NULL, NULL, UMA_ALIGN_PTR, 0);
@@ -226,6 +241,9 @@
 static void
 vnet_route_uninit(const void *unused __unused)
 {
+#ifdef DEBUG
+	printf("vnet_route_uninit\n");
+#endif
 	int table;
 	int fam;
 	struct domain *dom;
@@ -261,6 +279,9 @@
 int
 setfib(struct thread *td, struct setfib_args *uap)
 {
+#ifdef DEBUG
+	printf("setfib\n");
+#endif
 	if (uap->fibnum < 0 || uap->fibnum >= rt_numfibs)
 		return EINVAL;
 	td->td_proc->p_fibnum = uap->fibnum;
@@ -273,18 +294,27 @@
 void
 rtalloc(struct route *ro)
 {
+#ifdef DEBUG
+	printf("rtalloc\n");
+#endif
 	rtalloc_ign_fib(ro, 0UL, 0);
 }
 
 void
 rtalloc_fib(struct route *ro, u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rtalloc_fib\n");
+#endif
 	rtalloc_ign_fib(ro, 0UL, fibnum);
 }
 
 void
 rtalloc_ign(struct route *ro, u_long ignore)
 {
+#ifdef DEBUG
+	printf("rtalloc_ign\n");
+#endif
 	struct rtentry *rt;
 
 	if ((rt = ro->ro_rt) != NULL) {
@@ -301,6 +331,9 @@
 void
 rtalloc_ign_fib(struct route *ro, u_long ignore, u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rtalloc_ign_fib\n");
+#endif
 	struct rtentry *rt;
 
 	if ((rt = ro->ro_rt) != NULL) {
@@ -323,6 +356,9 @@
 struct rtentry *
 rtalloc1(struct sockaddr *dst, int report, u_long ignflags)
 {
+#ifdef DEBUG
+	printf("rtalloc1\n");
+#endif
 	return (rtalloc1_fib(dst, report, ignflags, 0));
 }
 
@@ -330,9 +366,12 @@
 rtalloc1_fib(struct sockaddr *dst, int report, u_long ignflags,
 		    u_int fibnum)
 {
-	struct radix_node_head *rnh;
+#ifdef DEBUG
+	printf("rtalloc1_fib\n");
+#endif
+	struct ptree *rnh;
 	struct rtentry *rt;
-	struct radix_node *rn;
+	struct ptree_node *rn;
 	struct rtentry *newrt;
 	struct rt_addrinfo info;
 	int err = 0, msgtype = RTM_MISS;
@@ -399,7 +438,10 @@
 void
 rtfree(struct rtentry *rt)
 {
-	struct radix_node_head *rnh;
+#ifdef DEBUG
+	printf("rtfree\n");
+#endif
+	struct ptree *rnh;
 
 	KASSERT(rt != NULL,("%s: NULL rt", __func__));
 	rnh = rt_tables_get_rnh(rt->rt_fibnum, rt_key(rt)->sa_family);
@@ -427,7 +469,7 @@
 	 * on the entry so that the code below reclaims the storage.
 	 */
 	if (rt->rt_refcnt == 0 && rnh->rnh_close)
-		rnh->rnh_close((struct radix_node *)rt, rnh);
+		rnh->rnh_close((struct ptree_node *)rt, rnh);
 
 	/*
 	 * If we are no longer "up" (and ref == 0)
@@ -486,6 +528,9 @@
 	int flags,
 	struct sockaddr *src)
 {
+#ifdef DEBUG
+	printf("rtredirect\n");
+#endif
 	rtredirect_fib(dst, gateway, netmask, flags, src, 0);
 }
 
@@ -497,12 +542,15 @@
 	struct sockaddr *src,
 	u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rtredirect_fib\n");
+#endif
 	struct rtentry *rt, *rt0 = NULL;
 	int error = 0;
 	short *stat = NULL;
 	struct rt_addrinfo info;
 	struct ifaddr *ifa;
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 
 	ifa = NULL;
 	rnh = rt_tables_get_rnh(fibnum, dst->sa_family);
@@ -617,6 +665,9 @@
 int
 rtioctl(u_long req, caddr_t data)
 {
+#ifdef DEBUG
+	printf("rtioctl\n");
+#endif
 	return (rtioctl_fib(req, data, 0));
 }
 
@@ -626,6 +677,9 @@
 int
 rtioctl_fib(u_long req, caddr_t data, u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rtioctl_fib\n");
+#endif
 
 	/*
 	 * If more ioctl commands are added here, make sure the proper
@@ -647,6 +701,9 @@
 struct ifaddr *
 ifa_ifwithroute(int flags, struct sockaddr *dst, struct sockaddr *gateway)
 {
+#ifdef DEBUG
+	printf("ifa_ifwithroute\n");
+#endif
 	return (ifa_ifwithroute_fib(flags, dst, gateway, 0));
 }
 
@@ -654,6 +711,9 @@
 ifa_ifwithroute_fib(int flags, struct sockaddr *dst, struct sockaddr *gateway,
 				u_int fibnum)
 {
+#ifdef DEBUG
+	printf("ifa_ifwithroute_fib\n");
+#endif
 	register struct ifaddr *ifa;
 	int not_found = 0;
 
@@ -732,6 +792,9 @@
 	int flags,
 	struct rtentry **ret_nrt)
 {
+#ifdef DEBUG
+	printf("rtrequest\n");
+#endif
 	return (rtrequest_fib(req, dst, gateway, netmask, flags, ret_nrt, 0));
 }
 
@@ -744,6 +807,9 @@
 	struct rtentry **ret_nrt,
 	u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rtrequest_fib\n");
+#endif
 	struct rt_addrinfo info;
 
 	if (dst->sa_len == 0)
@@ -771,6 +837,9 @@
 int
 rt_getifa(struct rt_addrinfo *info)
 {
+#ifdef DEBUG
+	printf("rt_getifa\n");
+#endif
 	return (rt_getifa_fib(info, 0));
 }
 
@@ -781,6 +850,9 @@
 int
 rt_getifa_fib(struct rt_addrinfo *info, u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rt_getifa_fib\n");
+#endif
 	struct ifaddr *ifa;
 	int error = 0;
 
@@ -825,8 +897,11 @@
 int
 rtexpunge(struct rtentry *rt)
 {
-	struct radix_node *rn;
-	struct radix_node_head *rnh;
+#ifdef DEBUG
+	printf("rtexpunge\n");
+#endif
+	struct ptree_node *rn;
+	struct ptree *rnh;
 	struct ifaddr *ifa;
 	int error = 0;
 
@@ -995,13 +1070,16 @@
 rtrequest1_fib(int req, struct rt_addrinfo *info, struct rtentry **ret_nrt,
 				u_int fibnum)
 {
+#ifdef DEBUG
+	printf("rtrequest1_fib\n");
+#endif
 	int error = 0, needlock = 0;
 	register struct rtentry *rt;
 #ifdef FLOWTABLE
 	register struct rtentry *rt0;
 #endif
-	register struct radix_node *rn;
-	register struct radix_node_head *rnh;
+	register struct ptree_node *rn;
+	register struct ptree *rnh;
 	struct ifaddr *ifa;
 	struct sockaddr *ndst;
 #define senderr(x) { error = x ; goto bad; }
@@ -1270,10 +1348,13 @@
 int
 rt_setgate(struct rtentry *rt, struct sockaddr *dst, struct sockaddr *gate)
 {
+#ifdef DEBUG
+	printf("rt_setgate\n");
+#endif
 	/* XXX dst may be overwritten, can we move this to below */
 	int dlen = SA_SIZE(dst), glen = SA_SIZE(gate);
 #ifdef INVARIANTS
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 
 	rnh = rt_tables_get_rnh(rt->rt_fibnum, dst->sa_family);
 #endif
@@ -1318,6 +1399,9 @@
 static void
 rt_maskedcopy(struct sockaddr *src, struct sockaddr *dst, struct sockaddr *netmask)
 {
+#ifdef DEBUG
+	printf("rt_maskedcopy\n");
+#endif
 	register u_char *cp1 = (u_char *)src;
 	register u_char *cp2 = (u_char *)dst;
 	register u_char *cp3 = (u_char *)netmask;
@@ -1342,6 +1426,9 @@
 static inline  int
 rtinit1(struct ifaddr *ifa, int cmd, int flags, int fibnum)
 {
+#ifdef DEBUG
+	printf("rtinit1\n");
+#endif
 	struct sockaddr *dst;
 	struct sockaddr *netmask;
 	struct rtentry *rt = NULL;
@@ -1405,8 +1492,8 @@
 	 */
 	for ( fibnum = startfib; fibnum <= endfib; fibnum++) {
 		if (cmd == RTM_DELETE) {
-			struct radix_node_head *rnh;
-			struct radix_node *rn;
+			struct ptree *rnh;
+			struct ptree_node *rn;
 			/*
 			 * Look up an rtentry that is in the routing tree and
 			 * contains the correct info.
@@ -1439,7 +1526,7 @@
 			}
 			else
 #endif
-			rn = rnh->rnh_lookup(dst, netmask, rnh);
+			rn = rnh->rnh_lookup(dst, netmask,(int)dst, rnh);
 			error = (rn == NULL ||
 			    (rn->rn_flags & RNF_ROOT) ||
 			    RNTORT(rn)->rt_ifa != ifa ||
@@ -1541,6 +1628,9 @@
 int
 rtinit_fib(struct ifaddr *ifa, int cmd, int flags)
 {
+#ifdef DEBUG
+	printf("rtinit1_fib\n");
+#endif
 	return (rtinit1(ifa, cmd, flags, -1));
 }
 
@@ -1551,6 +1641,9 @@
 int
 rtinit(struct ifaddr *ifa, int cmd, int flags)
 {
+#ifdef DEBUG
+	printf("rtinit\n");
+#endif
 	struct sockaddr *dst;
 	int fib = 0;
 
