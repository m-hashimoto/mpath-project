--- route.c.orig	2005-02-24 13:50:32.000000000 +0900
+++ route.c	2011-01-05 01:16:01.000000000 +0900
@@ -38,6 +38,7 @@
 #include "opt_route.h"
 #include "opt_mrouting.h"
 #include "opt_mpath.h"
+#include "opt_ptree.h"
 
 #include <sys/param.h>
 #include <sys/systm.h>
@@ -58,14 +59,13 @@
 #include <net/vnet.h>
 #include <net/flowtable.h>
 
-#ifdef RADIX_MPATH
-#include <net/radix_mpath.h>
-#endif
-
 #include <netinet/in.h>
 #include <netinet/ip_mroute.h>
 
 #include <vm/uma.h>
+#ifdef DEBUG
+#include <sys/types.h>
+#endif
 
 u_int rt_numfibs = RT_NUMFIBS;
 SYSCTL_INT(_net, OID_AUTO, fibs, CTLFLAG_RD, &rt_numfibs, 0, "");
@@ -88,7 +88,7 @@
     &rt_add_addr_allfibs, 0, "");
 TUNABLE_INT("net.add_addr_allfibs", &rt_add_addr_allfibs);
 
-VNET_DEFINE(struct radix_node_head *, rt_tables);
+VNET_DEFINE(struct ptree_node_head *, rt_tables);
 static VNET_DEFINE(uma_zone_t, rtzone);		/* Routing table UMA zone. */
 VNET_DEFINE(int, rttrash);		/* routes not in table but not freed */
 VNET_DEFINE(struct rtstat, rtstat);
@@ -114,7 +114,7 @@
  * But because there are a lot of assumptions in this conversion,
  * do not cast explicitly, but always use the macro below.
  */
-#define RNTORT(p)	((struct rtentry *)(p))
+#define RNTORT(p)	((struct rtentry *)(p->data))
 
 #if 0
 /* default fib for tunnels to use */
@@ -139,28 +139,26 @@
 SYSCTL_PROC(_net, OID_AUTO, my_fibnum, CTLTYPE_INT|CTLFLAG_RD,
             NULL, 0, &sysctl_my_fibnum, "I", "default FIB of caller");
 
-static __inline struct radix_node_head **
+		static __inline struct ptree_node_head **
 rt_tables_get_rnh_ptr(int table, int fam)
 {
-	struct radix_node_head **rnh;
+	struct ptree_node_head **rnh;
 
-	KASSERT(table >= 0 && table < rt_numfibs, ("%s: table out of bounds.",
-	    __func__));
+	KASSERT(table >= 0 && table < rt_numfibs, ("%s: table out of bounds.", __func__));
 	KASSERT(fam >= 0 && fam < (AF_MAX+1), ("%s: fam out of bounds.",
 	    __func__));
 
 	/* rnh is [fib=0][af=0]. */
-	rnh = (struct radix_node_head **)V_rt_tables;
+	rnh = (struct ptree_node_head **)V_rt_tables;
 	/* Get the offset to the requested table and fam. */
 	rnh += table * (AF_MAX+1) + fam;
 
 	return (rnh);
 }
 
-struct radix_node_head *
+		struct ptree_node_head *
 rt_tables_get_rnh(int table, int fam)
 {
-
 	return (*rt_tables_get_rnh_ptr(table, fam));
 }
 
@@ -171,13 +169,12 @@
 static void
 route_init(void)
 {
-
 	/* whack the tunable ints into  line. */
 	if (rt_numfibs > RT_MAXFIBS)
 		rt_numfibs = RT_MAXFIBS;
 	if (rt_numfibs == 0)
 		rt_numfibs = 1;
-	rn_init();	/* initialize all zeroes, all ones, mask table */
+	ptree_init();
 }
 SYSINIT(route_init, SI_SUB_PROTO_DOMAIN, SI_ORDER_THIRD, route_init, 0);
 
@@ -185,20 +182,20 @@
 vnet_route_init(const void *unused __unused)
 {
 	struct domain *dom;
-	struct radix_node_head **rnh;
+	struct ptree_node_head **rnh;
 	int table;
 	int fam;
 
 	V_rt_tables = malloc(rt_numfibs * (AF_MAX+1) *
-	    sizeof(struct radix_node_head *), M_RTABLE, M_WAITOK|M_ZERO);
+			sizeof(struct ptree_node_head *), M_RTABLE, M_WAITOK|M_ZERO);
 
 	V_rtzone = uma_zcreate("rtentry", sizeof(struct rtentry), NULL, NULL,
 	    NULL, NULL, UMA_ALIGN_PTR, 0);
 	for (dom = domains; dom; dom = dom->dom_next) {
 		if (dom->dom_rtattach)  {
 			for  (table = 0; table < rt_numfibs; table++) {
-				if ( (fam = dom->dom_family) == AF_INET ||
-				    table == 0) {
+							if ( (fam = dom->dom_family) == AF_INET 
+											|| table == 0) {
  			        	/* for now only AF_INET has > 1 table */
 					/* XXX MRT 
 					 * rtattach will be also called
@@ -229,7 +226,7 @@
 	int table;
 	int fam;
 	struct domain *dom;
-	struct radix_node_head **rnh;
+	struct ptree_node_head **rnh;
 
 	for (dom = domains; dom; dom = dom->dom_next) {
 		if (dom->dom_rtdetach) {
@@ -330,9 +327,9 @@
 rtalloc1_fib(struct sockaddr *dst, int report, u_long ignflags,
 		    u_int fibnum)
 {
-	struct radix_node_head *rnh;
+	struct ptree_node_head *rnh;
 	struct rtentry *rt;
-	struct radix_node *rn;
+	struct ptree_node *rn;
 	struct rtentry *newrt;
 	struct rt_addrinfo info;
 	int err = 0, msgtype = RTM_MISS;
@@ -357,15 +354,24 @@
 	else
 		RADIX_NODE_HEAD_LOCK_ASSERT(rnh);
 #endif
+	long long int c0,c1,c2;
+	RDTSC(c0);
+	RDTSC(c1);
 	rn = rnh->rnh_matchaddr(dst, rnh);
-	if (rn && ((rn->rn_flags & RNF_ROOT) == 0)) {
+	RDTSC(c2);
+	dprint(("-rtalloc: RDTSC Interval	   :%lld clk\n",c1-c0));
+	dprint(("-rtalloc1_fib: pnh_matchaddr %lld[clk]\n",c2-c1-(c1-c0)));
+	if (rn) {
 		newrt = rt = RNTORT(rn);
+#ifdef PTREE_MPATH
+			uint32_t seed = arc4random();
+			newrt = multipath_nexthop((unsigned int)seed, rt);
+#endif
 		RT_LOCK(newrt);
 		RT_ADDREF(newrt);
 		if (needlock)
 			RADIX_NODE_HEAD_RUNLOCK(rnh);
 		goto done;
-
 	} else if (needlock)
 		RADIX_NODE_HEAD_RUNLOCK(rnh);
 	
@@ -399,7 +405,7 @@
 void
 rtfree(struct rtentry *rt)
 {
-	struct radix_node_head *rnh;
+	struct ptree_node_head *rnh;
 
 	KASSERT(rt != NULL,("%s: NULL rt", __func__));
 	rnh = rt_tables_get_rnh(rt->rt_fibnum, rt_key(rt)->sa_family);
@@ -427,7 +433,7 @@
 	 * on the entry so that the code below reclaims the storage.
 	 */
 	if (rt->rt_refcnt == 0 && rnh->rnh_close)
-		rnh->rnh_close((struct radix_node *)rt, rnh);
+			rnh->rnh_close((struct ptree_node *)rt, rnh);
 
 	/*
 	 * If we are no longer "up" (and ref == 0)
@@ -435,18 +441,15 @@
 	 * with the route.
 	 */
 	if ((rt->rt_flags & RTF_UP) == 0) {
-		if (rt->rt_nodes->rn_flags & (RNF_ACTIVE | RNF_ROOT))
-			panic("rtfree 2");
+			if (rt->rt_nodes->data == NULL)
 		/*
 		 * the rtentry must have been removed from the routing table
 		 * so it is represented in rttrash.. remove that now.
 		 */
 		V_rttrash--;
 #ifdef	DIAGNOSTIC
-		if (rt->rt_refcnt < 0) {
-			printf("rtfree: %p not freed (neg refs)\n", rt);
+			if (rt->rt_refcnt < 0) 
 			goto done;
-		}
 #endif
 		/*
 		 * release references on items we hold them on..
@@ -502,7 +505,7 @@
 	short *stat = NULL;
 	struct rt_addrinfo info;
 	struct ifaddr *ifa;
-	struct radix_node_head *rnh;
+	struct ptree_node_head *rnh;
 
 	ifa = NULL;
 	rnh = rt_tables_get_rnh(fibnum, dst->sa_family);
@@ -626,7 +629,6 @@
 int
 rtioctl_fib(u_long req, caddr_t data, u_int fibnum)
 {
-
 	/*
 	 * If more ioctl commands are added here, make sure the proper
 	 * super-user checks are being performed because it is possible for
@@ -825,8 +827,8 @@
 int
 rtexpunge(struct rtentry *rt)
 {
-	struct radix_node *rn;
-	struct radix_node_head *rnh;
+	struct ptree_node *rn;
+	struct ptree_node_head *rnh;
 	struct ifaddr *ifa;
 	int error = 0;
 
@@ -888,14 +890,14 @@
 #ifdef RADIX_MPATH
 static int
 rn_mpath_update(int req, struct rt_addrinfo *info,
-    struct radix_node_head *rnh, struct rtentry **ret_nrt)
+				struct ptree_node_head *rnh, struct rtentry **ret_nrt)
 {
 	/*
 	 * if we got multipath routes, we require users to specify
 	 * a matching RTAX_GATEWAY.
 	 */
 	struct rtentry *rt, *rto = NULL;
-	register struct radix_node *rn;
+	register struct ptree_node *rn;
 	int error = 0;
 
 	rn = rnh->rnh_matchaddr(dst, rnh);
@@ -909,7 +911,7 @@
 	 * this is the first entry in the chain
 	 */
 	if (rto == rt) {
-		rn = rn_mpath_next((struct radix_node *)rt);
+			rn = rn_mpath_next((struct ptree_node *)rt);
 		/*
 		 * there is another entry, now it's active
 		 */
@@ -1000,11 +1002,12 @@
 #ifdef FLOWTABLE
 	register struct rtentry *rt0;
 #endif
-	register struct radix_node *rn;
-	register struct radix_node_head *rnh;
+	struct ptree_node *rn;
+	register struct ptree_node_head *rnh;
 	struct ifaddr *ifa;
 	struct sockaddr *ndst;
-#define senderr(x) { error = x ; goto bad; }
+	long long int c0,c1,c2;
+#define senderr(x) { error = x ; printf("goto bad: error = %x\n",x); goto bad; }
 
 	KASSERT((fibnum < rt_numfibs), ("rtrequest1_fib: bad fibnum"));
 	if (dst->sa_family != AF_INET)	/* Only INET supports > 1 fib now */
@@ -1045,29 +1048,34 @@
 		 * Remove the item from the tree and return it.
 		 * Complain if it is not there and do no more processing.
 		 */
-		rn = rnh->rnh_deladdr(dst, netmask, rnh);
+			RDTSC(c0);
+			RDTSC(c1);
+			rn = rnh->rnh_deladdr(dst, info->rti_info[RTAX_GATEWAY], rnh);
+			RDTSC(c2);
+			dprint(("-rtrequest: RDTSC Interva    :%lld clk\n",c1-c0));
+			dprint(("-rtrequest1_fib RTM_DELETE: pnh_deladdr %lld[clk]\n",
+															c2-c1-(c1-c0) ));
 		if (rn == NULL)
 			senderr(ESRCH);
+#if 0
 		if (rn->rn_flags & (RNF_ACTIVE | RNF_ROOT))
 			panic ("rtrequest delete");
+#endif
 		rt = RNTORT(rn);
 		RT_LOCK(rt);
 		RT_ADDREF(rt);
 		rt->rt_flags &= ~RTF_UP;
-
 		/*
 		 * give the protocol a chance to keep things in sync.
 		 */
 		if ((ifa = rt->rt_ifa) && ifa->ifa_rtrequest)
 			ifa->ifa_rtrequest(RTM_DELETE, rt, info);
-
 		/*
 		 * One more rtentry floating around that is not
 		 * linked to the routing table. rttrash will be decremented
 		 * when RTFREE(rt) is eventually called.
 		 */
 		V_rttrash++;
-
 		/*
 		 * If the caller wants it, then it can have it,
 		 * but it's up to it to free the rtentry as we won't be
@@ -1091,13 +1099,13 @@
 		if (dst && gateway && (dst->sa_family != gateway->sa_family) && 
 		    (gateway->sa_family != AF_UNSPEC) && (gateway->sa_family != AF_LINK))
 			senderr(EINVAL);
-
 		if (info->rti_ifa == NULL) {
 			error = rt_getifa_fib(info, fibnum);
 			if (error)
 				senderr(error);
 		} else
 			ifa_ref(info->rti_ifa);
+				
 		ifa = info->rti_ifa;
 		rt = uma_zalloc(V_rtzone, M_NOWAIT | M_ZERO);
 		if (rt == NULL) {
@@ -1113,6 +1121,24 @@
 		 * 
 		 */
 		RT_LOCK(rt);
+			RT_LOCK_ASSERT(rt);
+			int dlen = SA_SIZE(dst), glen = SA_SIZE(gateway);
+			caddr_t new;
+
+			R_Zalloc(new, caddr_t, dlen + glen);
+			if (new == NULL){
+				RT_LOCK_DESTROY(rt);
+				if (ifa != NULL)
+					ifa_free(ifa);
+				uma_zfree(V_rtzone, rt);
+				senderr(ENOBUFS);
+			}
+			bcopy(dst, new, dlen);
+			if(rt->rt_gateway == NULL || glen > SA_SIZE(rt->rt_gateway))
+				rt->rt_gateway = (struct sockaddr *)(new + dlen);
+			bcopy(gateway, rt->rt_gateway, glen);
+
+#if 0
 		if ((error = rt_setgate(rt, dst, gateway)) != 0) {
 			RT_LOCK_DESTROY(rt);
 			if (ifa != NULL)
@@ -1120,12 +1146,11 @@
 			uma_zfree(V_rtzone, rt);
 			senderr(error);
 		}
-
+#endif
 		/*
 		 * point to the (possibly newly malloc'd) dest address.
 		 */
-		ndst = (struct sockaddr *)rt_key(rt);
-
+			ndst = (struct sockaddr *)new;
 		/*
 		 * make sure it contains the value we want (masked if needed).
 		 */
@@ -1133,7 +1158,6 @@
 			rt_maskedcopy(dst, ndst, netmask);
 		} else
 			bcopy(dst, ndst, dst->sa_len);
-
 		/*
 		 * We use the ifa reference returned by rt_getifa_fib().
 		 * This moved from below so that rnh->rnh_addaddr() can
@@ -1142,7 +1166,6 @@
 		rt->rt_ifa = ifa;
 		rt->rt_ifp = ifa->ifa_ifp;
 		rt->rt_rmx.rmx_weight = 1;
-
 #ifdef RADIX_MPATH
 		/* do not permit exactly the same dst/mask/gw pair */
 		if (rn_mpath_capable(rnh) &&
@@ -1156,7 +1179,20 @@
 			senderr(EEXIST);
 		}
 #endif
-
+#ifdef PTREE_MPATH
+		/* do not permit exactly the same dst/mask/gw pair */
+			if (ptree_mpath_capable(rnh) &&
+				rt_mpath_conflict(rnh, rt, ndst)) {
+					if (rt->rt_ifa) {
+							ifa_free(rt->rt_ifa);
+					}
+					RT_LOCK_DESTROY(rt);
+					uma_zfree(V_rtzone, rt);
+					senderr(EEXIST);
+			}
+			/* init mpath_array */
+			rt->mpath_array = 0;
+#endif
 #ifdef FLOWTABLE
 		rt0 = NULL;
 		/* XXX
@@ -1169,7 +1205,6 @@
 				struct sockaddr *mask;
 				u_char *m, *n;
 				int len;
-				
 				/*
 				 * compare mask to see if the new route is
 				 * more specific than the existing one
@@ -1205,9 +1240,13 @@
 		}
 #endif
 #endif
-
 		/* XXX mtu manipulation will be done in rnh_addaddr -- itojun */
-		rn = rnh->rnh_addaddr(ndst, netmask, rnh, rt->rt_nodes);
+			RDTSC(c0);
+			RDTSC(c1);
+			rn = rnh->rnh_addaddr(ndst, netmask, rnh, (struct ptree_node *)rt);
+			RDTSC(c2);
+			dprint(("-rtrequest: RDTSC Interval   :%lld clk\n",c1-c0));
+			dprint(("-rtrequest1_fib RTM_ADD: pnh_addaddr %lld[clk]\n",c2-c1-(c1-c0)));
 		/*
 		 * If it still failed to go into the tree,
 		 * then un-make it (this should be a function)
@@ -1232,14 +1271,12 @@
 			RTFREE(rt0);
 		}
 #endif
-
 		/*
 		 * If this protocol has something to add to this then
 		 * allow it to do that as well.
 		 */
 		if (ifa->ifa_rtrequest)
 			ifa->ifa_rtrequest(req, rt, info);
-
 		/*
 		 * actually return a resultant rtentry and
 		 * give the caller a single reference.
@@ -1256,6 +1293,10 @@
 bad:
 	if (needlock)
 		RADIX_NODE_HEAD_UNLOCK(rnh);
+#if 0
+	if (DEBUG)
+		debug_tree_print(rnh);
+#endif
 	return (error);
 #undef senderr
 }
@@ -1273,11 +1314,10 @@
 	/* XXX dst may be overwritten, can we move this to below */
 	int dlen = SA_SIZE(dst), glen = SA_SIZE(gate);
 #ifdef INVARIANTS
-	struct radix_node_head *rnh;
+	struct ptree_node_head *rnh;
 
 	rnh = rt_tables_get_rnh(rt->rt_fibnum, dst->sa_family);
 #endif
-
 	RT_LOCK_ASSERT(rt);
 	RADIX_NODE_HEAD_LOCK_ASSERT(rnh);
 	
@@ -1311,7 +1351,6 @@
 	 * Copy the new gateway value into the memory chunk.
 	 */
 	bcopy(gate, rt->rt_gateway, glen);
-
 	return (0);
 }
 
@@ -1374,8 +1413,9 @@
 		startfib = fibnum;
 		endfib = fibnum;
 	}
-	if (dst->sa_len == 0)
+	if (dst->sa_len == 0){
 		return(EINVAL);
+	}
 
 	/*
 	 * If it's a delete, check that if it exists,
@@ -1405,8 +1445,8 @@
 	 */
 	for ( fibnum = startfib; fibnum <= endfib; fibnum++) {
 		if (cmd == RTM_DELETE) {
-			struct radix_node_head *rnh;
-			struct radix_node *rn;
+					struct ptree_node_head *rnh;
+					struct ptree_node *rn;
 			/*
 			 * Look up an rtentry that is in the routing tree and
 			 * contains the correct info.
@@ -1439,11 +1479,10 @@
 			}
 			else
 #endif
-			rn = rnh->rnh_lookup(dst, netmask, rnh);
+							rn = rnh->rnh_lookup(dst->sa_data, (int)*(const u_char *)netmask->sa_data, rnh->pnh_treetop);
 			error = (rn == NULL ||
-			    (rn->rn_flags & RNF_ROOT) ||
 			    RNTORT(rn)->rt_ifa != ifa ||
-			    !sa_equal((struct sockaddr *)rn->rn_key, dst));
+									!sa_equal((struct sockaddr *)rn->key, dst));
 			RADIX_NODE_HEAD_UNLOCK(rnh);
 			if (error) {
 				/* this is only an error if bad on ALL tables */
