--- in6_rmx.c.orig	2005-01-19 12:54:14.000000000 +0900
+++ in6_rmx.c	2005-01-19 14:29:26.000000000 +0900
@@ -112,17 +112,18 @@
 #endif
 
 #define RTPRF_OURS		RTF_PROTO3	/* set on routes we manage */
+#define dprint(x) { if(DEBUG) printf x; }
 
 /*
  * Do what we need to do when inserting a route.
  */
-static struct radix_node *
-in6_addroute(void *v_arg, void *n_arg, struct radix_node_head *head,
-    struct radix_node *treenodes)
+static struct ptree_node *
+in6_addroute(void *v_arg, void *n_arg, struct ptree *head,
+    struct ptree_node *treenodes)
 {
 	struct rtentry *rt = (struct rtentry *)treenodes;
 	struct sockaddr_in6 *sin6 = (struct sockaddr_in6 *)rt_key(rt);
-	struct radix_node *ret;
+	struct ptree_node *ret;
 
 	RADIX_NODE_HEAD_WLOCK_ASSERT(head);
 	if (IN6_IS_ADDR_MULTICAST(&sin6->sin6_addr))
@@ -153,7 +154,7 @@
 	if (!rt->rt_rmx.rmx_mtu && rt->rt_ifp)
 		rt->rt_rmx.rmx_mtu = IN6_LINKMTU(rt->rt_ifp);
 
-	ret = rn_addroute(v_arg, n_arg, head, treenodes);
+	ret = ptree_addroute(v_arg, n_arg, head, treenodes);
 	if (ret == NULL) {
 		struct rtentry *rt2;
 		/*
@@ -187,10 +188,10 @@
  * were managing the route, stop doing so and set the expiration timer
  * back off again.
  */
-static struct radix_node *
-in6_matroute(void *v_arg, struct radix_node_head *head)
+static struct ptree_node *
+in6_matroute(void *v_arg, struct ptree *head)
 {
-	struct radix_node *rn = rn_match(v_arg, head);
+	struct ptree_node *rn = ptree_matchaddr(v_arg, head);
 	struct rtentry *rt = (struct rtentry *)rn;
 
 	if (rt && rt->rt_refcnt == 0) { /* this is first reference */
@@ -222,7 +223,7 @@
     &VNET_NAME(rtq_toomany6) , 0, "");
 
 struct rtqk_arg {
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 	int mode;
 	int updating;
 	int draining;
@@ -237,7 +238,7 @@
  * nothing has a timeout longer than the current value of rtq_reallyold6.
  */
 static int
-in6_rtqkill(struct radix_node *rn, void *rock)
+in6_rtqkill(struct ptree_node *rn, void *rock)
 {
 	struct rtqk_arg *ap = rock;
 	struct rtentry *rt = (struct rtentry *)rn;
@@ -287,7 +288,7 @@
 in6_rtqtimo(void *rock)
 {
 	CURVNET_SET_QUIET((struct vnet *) rock);
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 	struct rtqk_arg arg;
 	struct timeval atv;
 	static time_t last_adjusted_timeout = 0;
@@ -343,7 +344,7 @@
  * Age old PMTUs.
  */
 struct mtuex_arg {
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 	time_t nextstop;
 };
 
@@ -351,7 +352,7 @@
 #define	V_rtq_mtutimer			VNET(rtq_mtutimer)
 
 static int
-in6_mtuexpire(struct radix_node *rn, void *rock)
+in6_mtuexpire(struct ptree_node *rn, void *rock)
 {
 	struct rtentry *rt = (struct rtentry *)rn;
 	struct mtuex_arg *ap = rock;
@@ -378,7 +379,7 @@
 in6_mtutimo(void *rock)
 {
 	CURVNET_SET_QUIET((struct vnet *) rock);
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 	struct mtuex_arg arg;
 	struct timeval atv;
 
@@ -414,9 +415,10 @@
 int
 in6_inithead(void **head, int off)
 {
-	struct radix_node_head *rnh;
+	dprint(("in6_inithead Start off = %d\n",off));
+	struct ptree *rnh;
 
-	if (!rn_inithead(head, offsetof(struct sockaddr_in6, sin6_addr) << 3))
+	if (!ptree_inithead(head, offsetof(struct sockaddr_in6, sin6_addr) << 3))
 		return 0;		/* See above */
 
 	if (off == 0)		/* See above */
@@ -435,6 +437,7 @@
 	callout_init(&V_rtq_mtutimer, CALLOUT_MPSAFE);
 	in6_rtqtimo(curvnet);	/* kick off timeout first time */
 	in6_mtutimo(curvnet);	/* kick off timeout first time */
+	dprint(("in6_inithead End\n"));
 	return 1;
 }
 
@@ -448,3 +451,4 @@
 	return (1);
 }
 #endif
+#undef dprint
