--- in6.c.orig	2005-02-10 21:46:02.000000000 +0900
+++ in6.c	2005-02-10 23:50:05.000000000 +0900
@@ -104,6 +104,7 @@
 #include <netinet6/scope6_var.h>
 #include <netinet6/in6_pcb.h>
 
+#include <stdio.h>
 /*
  * Definitions of some costant IP6 addresses.
  */
@@ -180,6 +181,7 @@
 in6_control(struct socket *so, u_long cmd, caddr_t data,
     struct ifnet *ifp, struct thread *td)
 {
+	printf("in6_control Start\n");
 	struct	in6_ifreq *ifr = (struct in6_ifreq *)data;
 	struct	in6_ifaddr *ia = NULL;
 	struct	in6_aliasreq *ifra = (struct in6_aliasreq *)data;
@@ -527,6 +529,7 @@
 
 	case SIOCAIFADDR_IN6:
 	{
+		printf("in6_contorl: case SIOCAIFADDR_IN6\n");
 		int i;
 		struct nd_prefixctl pr0;
 		struct nd_prefix *pr;
@@ -680,6 +683,7 @@
 in6_update_ifa(struct ifnet *ifp, struct in6_aliasreq *ifra,
     struct in6_ifaddr *ia, int flags)
 {
+	printf("in6_update_ifa: testprint Start\n");
 	int error = 0, hostIsNew = 0, plen = -1;
 	struct sockaddr_in6 dst6;
 	struct in6_addrlifetime *lt;
@@ -688,7 +692,7 @@
 	struct rtentry *rt;
 	int delay;
 	char ip6buf[INET6_ADDRSTRLEN];
-
+	printf("in6_update_ifa: testprint 1\n");
 	/* Validate parameters */
 	if (ifp == NULL || ifra == NULL) /* this maybe redundant */
 		return (EINVAL);
@@ -697,6 +701,7 @@
 	 * The destination address for a p2p link must have a family
 	 * of AF_UNSPEC or AF_INET6.
 	 */
+	printf("in6_update_ifa: testprint 2\n");
 	if ((ifp->if_flags & IFF_POINTOPOINT) != 0 &&
 	    ifra->ifra_dstaddr.sin6_family != AF_INET6 &&
 	    ifra->ifra_dstaddr.sin6_family != AF_UNSPEC)
@@ -705,6 +710,7 @@
 	 * validate ifra_prefixmask.  don't check sin6_family, netmask
 	 * does not carry fields other than sin6_len.
 	 */
+	printf("in6_update_ifa: testprint 3\n");
 	if (ifra->ifra_prefixmask.sin6_len > sizeof(struct sockaddr_in6))
 		return (EINVAL);
 	/*
@@ -713,6 +719,7 @@
 	 * We also require the prefix (when specified) mask is valid, and thus
 	 * reject a non-consecutive mask.
 	 */
+	printf("in6_update_ifa: testprint 4\n");
 	if (ia == NULL && ifra->ifra_prefixmask.sin6_len == 0)
 		return (EINVAL);
 	if (ifra->ifra_prefixmask.sin6_len != 0) {
@@ -733,6 +740,7 @@
 	 * and the address is a scoped one, validate/set the scope
 	 * zone identifier.
 	 */
+	printf("in6_update_ifa: testprint 5\n");
 	dst6 = ifra->ifra_dstaddr;
 	if ((ifp->if_flags & (IFF_POINTOPOINT|IFF_LOOPBACK)) != 0 &&
 	    (dst6.sin6_family == AF_INET6)) {
@@ -758,6 +766,7 @@
 	 * loopback interface.  If specified, the corresponding prefix length
 	 * must be 128.
 	 */
+	printf("in6_update_ifa: testprint 6\n");
 	if (ifra->ifra_dstaddr.sin6_family == AF_INET6) {
 		if ((ifp->if_flags & (IFF_POINTOPOINT|IFF_LOOPBACK)) == 0) {
 			/* XXX: noisy message */
@@ -772,6 +781,7 @@
 		}
 	}
 	/* lifetime consistency check */
+	printf("in6_update_ifa: testprint 7\n");
 	lt = &ifra->ifra_lifetime;
 	if (lt->ia6t_pltime > lt->ia6t_vltime)
 		return (EINVAL);
@@ -792,6 +802,7 @@
 	 * If this is a new address, allocate a new ifaddr and link it
 	 * into chains.
 	 */
+	printf("in6_update_ifa: testprint 8\n");
 	if (ia == NULL) {
 		hostIsNew = 1;
 		/*
@@ -838,6 +849,7 @@
 	ia->ia6_updatetime = time_second;
 
 	/* set prefix mask */
+	printf("in6_update_ifa: testprint 9\n");
 	if (ifra->ifra_prefixmask.sin6_len) {
 		/*
 		 * We prohibit changing the prefix length of an existing
@@ -861,6 +873,7 @@
 	 * install the new destination.  Note that the interface must be
 	 * p2p or loopback (see the check above.)
 	 */
+	printf("in6_update_ifa: testprint 10\n");
 	if (dst6.sin6_family == AF_INET6 &&
 	    !IN6_ARE_ADDR_EQUAL(&dst6.sin6_addr, &ia->ia_dstaddr.sin6_addr)) {
 		int e;
@@ -881,6 +894,7 @@
 	 * to see if the address is deprecated or invalidated, but initialize
 	 * these members for applications.
 	 */
+	printf("in6_update_ifa: testprint 11\n");
 	ia->ia6_lifetime = ifra->ifra_lifetime;
 	if (ia->ia6_lifetime.ia6t_vltime != ND6_INFINITE_LIFETIME) {
 		ia->ia6_lifetime.ia6t_expire =
@@ -914,6 +928,7 @@
 	 * so that corresponding MLD responses would not have a tentative
 	 * source address.
 	 */
+	printf("in6_update_ifa: testprint 12\n");
 	ia->ia6_flags &= ~IN6_IFF_DUPLICATED;	/* safety */
 	if (hostIsNew && in6if_do_dad(ifp))
 		ia->ia6_flags |= IN6_IFF_TENTATIVE;
@@ -1102,6 +1117,7 @@
 	 * XXX It may be of use, if we can administratively
 	 * disable DAD.
 	 */
+	printf("in6_update_ifa: testprint 13\n");
 	if (in6if_do_dad(ifp) && ((ifra->ifra_flags & IN6_IFF_NODAD) == 0) &&
 	    (ia->ia6_flags & IN6_IFF_TENTATIVE))
 	{
