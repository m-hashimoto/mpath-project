--- nd6_rtr.c.orig	2005-01-26 12:24:20.000000000 +0900
+++ nd6_rtr.c	2005-01-27 07:27:06.000000000 +0900
@@ -53,7 +53,7 @@
 #include <net/if_types.h>
 #include <net/if_dl.h>
 #include <net/route.h>
-#include <net/radix.h>
+#include <net/ptree.h>
 #include <net/vnet.h>
 
 #include <netinet/in.h>
@@ -84,7 +84,7 @@
 static void in6_init_address_ltimes __P((struct nd_prefix *,
 	struct in6_addrlifetime *));
 
-static int rt6_deleteroute(struct radix_node *, void *);
+static int rt6_deleteroute(struct ptree_node *, void *);
 
 VNET_DECLARE(int, nd6_recalc_reachtm_interval);
 #define	V_nd6_recalc_reachtm_interval	VNET(nd6_recalc_reachtm_interval)
@@ -106,6 +106,10 @@
 #define RTPREF_RESERVED	(-2)
 #define RTPREF_INVALID	(-3)	/* internal */
 
+/* debug print */
+#define DEBUG 0
+#define dprint(x) { if(DEBUG) printf x; }
+
 /*
  * Receive Router Solicitation Message - just for routers.
  * Router solicitation/advertisement is mostly managed by userland program
@@ -1557,10 +1561,11 @@
 	struct nd_prefix *opr;
 	u_long rtflags;
 	int error = 0;
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 	struct rtentry *rt = NULL;
 	char ip6buf[INET6_ADDRSTRLEN];
 	struct sockaddr_dl null_sdl = {sizeof(null_sdl), AF_LINK};
+	dprint(("nd6_prefix_onlink Start\n"));
 
 	/* sanity check */
 	if ((pr->ndpr_stateflags & NDPRF_ONLINK) != 0) {
@@ -1570,6 +1575,7 @@
 		    pr->ndpr_plen));
 		return (EEXIST);
 	}
+	dprint(("nd6_prefix_onlink:  test print 1\n"));
 
 	/*
 	 * Add the interface route associated with the prefix.  Before
@@ -1590,6 +1596,7 @@
 		    &opr->ndpr_prefix.sin6_addr, pr->ndpr_plen))
 			return (0);
 	}
+	dprint(("nd6_prefix_onlink:  test print 2\n"));
 
 	/*
 	 * We prefer link-local addresses as the associated interface address.
@@ -1623,6 +1630,7 @@
 		    pr->ndpr_plen, if_name(ifp)));
 		return (0);
 	}
+	dprint(("nd6_prefix_onlink:  test print 3\n"));
 
 	/*
 	 * in6_ifinit() sets nd6_rtrequest to ifa_rtrequest for all ifaddrs.
@@ -1636,6 +1644,9 @@
 	    ifa->ifa_addr, (struct sockaddr *)&mask6, rtflags, &rt);
 	if (error == 0) {
 		if (rt != NULL) /* this should be non NULL, though */ {
+			dprint(("nd6_prefix_onlink: rt = %p\n",rt));
+			dprint(("nd6_prefix_onlink: call rnh [table:%d][fim:%d]\n",
+									rt->rt_fibnum,AF_INET6));
 			rnh = rt_tables_get_rnh(rt->rt_fibnum, AF_INET6);
 			/* XXX what if rhn == NULL? */
 			RADIX_NODE_HEAD_LOCK(rnh);
@@ -1661,6 +1672,7 @@
 		    ip6_sprintf(ip6bufg, &((struct sockaddr_in6 *)ifa->ifa_addr)->sin6_addr),
 		    ip6_sprintf(ip6bufm, &mask6.sin6_addr), rtflags, error));
 	}
+	dprint(("nd6_prefix_onlink:  test print 4\n"));
 
 	if (rt != NULL) {
 		RT_LOCK(rt);
@@ -1670,6 +1682,7 @@
 	if (ifa != NULL)
 		ifa_free(ifa);
 
+	dprint(("nd6_prefix_onlink End\n"));
 	return (error);
 }
 
@@ -2076,7 +2089,7 @@
 void
 rt6_flush(struct in6_addr *gateway, struct ifnet *ifp)
 {
-	struct radix_node_head *rnh;
+	struct ptree *rnh;
 	int s = splnet();
 
 	/* We'll care only link-local addresses */
@@ -2096,7 +2109,7 @@
 }
 
 static int
-rt6_deleteroute(struct radix_node *rn, void *arg)
+rt6_deleteroute(struct ptree_node *rn, void *arg)
 {
 #define SIN6(s)	((struct sockaddr_in6 *)s)
 	struct rtentry *rt = (struct rtentry *)rn;
@@ -2156,3 +2169,6 @@
 
 	return (error);
 }
+/* debug print */
+#undef DEBUG
+#undef dprint
