--- route.c.org	2010-12-26 14:51:50.000000000 +0900
+++ route.c	2010-12-26 15:04:12.000000000 +0900
@@ -51,7 +51,8 @@
 #include <net/if_var.h>
 #include <net/if_dl.h>
 #include <net/if_types.h>
-#include <net/radix.h>
+#include <net/ptree.h>
+#include <net/ptree_mpath.h>
 #include <net/route.h>
 
 #include <netinet/in.h>
@@ -120,19 +121,18 @@
 int	fibnum;
 int	do_rtent = 0;
 struct	rtentry rtentry;
-struct	radix_node rnode;
-struct	radix_mask rmask;
-struct	radix_node_head **rt_tables;
+struct	ptree_node rnode;
+struct	ptree_node_head **rt_tables;
 
 int	NewTree = 0;
 
 struct	timespec uptime;
 
 static struct sockaddr *kgetsa(struct sockaddr *);
-static void size_cols(int ef, struct radix_node *rn);
-static void size_cols_tree(struct radix_node *rn);
+static void size_cols(int ef, struct ptree_node *rn);
+static void size_cols_tree(struct ptree_node *rn);
 static void size_cols_rtentry(struct rtentry *rt);
-static void p_tree(struct radix_node *);
+static void p_tree(struct ptree_node *);
 static void p_rtnode(void);
 static void ntreestuff(void);
 static void np_rtentry(struct rt_msghdr *);
@@ -150,10 +150,11 @@
 void
 routepr(u_long rtree)
 {
-	struct radix_node_head **rnhp, *rnh, head;
+	struct ptree_node_head **rnhp, *rnh, head;
 	size_t intsize;
 	int i;
 	int numfibs;
+	printf("routepr Start\n");
 
 	intsize = sizeof(int);
 	if (sysctlbyname("net.my_fibnum", &fibnum, &intsize, NULL, 0) == -1)
@@ -161,7 +162,7 @@
 	if (sysctlbyname("net.fibs", &numfibs, &intsize, NULL, 0) == -1)
 		numfibs = 1;
 	rt_tables = calloc(numfibs * (AF_MAX+1),
-	    sizeof(struct radix_node_head *));
+	    sizeof(struct ptree_node_head *));
 	if (rt_tables == NULL)
 		err(EX_OSERR, "memory allocation failed");
 	/*
@@ -183,7 +184,7 @@
 		}
 
 		if (kread((u_long)(rtree), (char *)(rt_tables), (numfibs *
-		    (AF_MAX+1) * sizeof(struct radix_node_head *))) != 0)
+		    (AF_MAX+1) * sizeof(struct ptree_node_head *))) != 0)
 			return;
 		for (i = 0; i <= AF_MAX; i++) {
 			int tmpfib;
@@ -191,31 +192,36 @@
 				tmpfib = 0;
 			else
 				tmpfib = fibnum;
-			rnhp = (struct radix_node_head **)*rt_tables;
+			rnhp = (struct ptree_node_head **)*rt_tables;
 			/* Calculate the in-kernel address. */
 			rnhp += tmpfib * (AF_MAX+1) + i;
 			/* Read the in kernel rhn pointer. */
 			if (kget(rnhp, rnh) != 0)
 				continue;
+			printf("routepr: rnh[%p]\n",rnh);
 			if (rnh == NULL)
 				continue;
 			/* Read the rnh data. */
 			if (kget(rnh, head) != 0)
 				continue;
+			printf("routepr: i[%d]\n",i);
 			if (i == AF_UNSPEC) {
+				printf("routepr: i == AF_UNSPEC\n");
 				if (Aflag && af == 0) {
 					printf("Netmasks:\n");
-					p_tree(head.rnh_treetop);
+					p_tree(rnh->pnh_top);
 				}
 			} else if (af == AF_UNSPEC || af == i) {
-				size_cols(i, head.rnh_treetop);
+				printf("routepr: af == AF_UNSPEC || af == i\n");
+				size_cols(i, rnh->pnh_top);
 				pr_family(i);
 				do_rtent = 1;
 				pr_rthdr(i);
-				p_tree(head.rnh_treetop);
+				p_tree(head.pnh_top);
 			}
 		}
 	}
+	printf("routepr End\n");
 }
 
 /*
@@ -225,6 +231,7 @@
 pr_family(int af1)
 {
 	const char *afname;
+	printf("pr_famoly Start\n");
 
 	switch (af1) {
 	case AF_INET:
@@ -283,8 +290,9 @@
 static int wid_expire;
 
 static void
-size_cols(int ef __unused, struct radix_node *rn)
+size_cols(int ef __unused, struct ptree_node *rn)
 {
+	printf("size_cols Start\n");
 	wid_dst = WID_DST_DEFAULT(ef);
 	wid_gw = WID_GW_DEFAULT(ef);
 	wid_flags = 6;
@@ -299,27 +307,22 @@
 }
 
 static void
-size_cols_tree(struct radix_node *rn)
+size_cols_tree(struct ptree_node *rn)
 {
-again:
+	printf("size_cols_tree Start\n");
 	if (kget(rn, rnode) != 0)
 		return;
-	if (!(rnode.rn_flags & RNF_ACTIVE))
+	if(!rn->data)
 		return;
-	if (rnode.rn_bit < 0) {
-		if ((rnode.rn_flags & RNF_ROOT) == 0) {
-			if (kget(rn, rtentry) != 0)
+	else{
+		if (kget(rn->data,rtentry) != 0)
 				return;
 			size_cols_rtentry(&rtentry);
 		}
-		if ((rn = rnode.rn_dupedkey))
-			goto again;
-	} else {
-		rn = rnode.rn_right;
-		size_cols_tree(rnode.rn_left);
+	rn = rnode.child[1];
+	size_cols_tree(rnode.child[0]);
 		size_cols_tree(rn);
 	}
-}
 
 static void
 size_cols_rtentry(struct rtentry *rt)
@@ -330,6 +333,7 @@
 	struct sockaddr *sa;
 	sa_u addr, mask;
 	int len;
+	printf("size_cols_rtentry Start\n");
 
 	bzero(&addr, sizeof(addr));
 	if ((sa = kgetsa(rt_key(rt))))
@@ -382,13 +386,13 @@
 	}
 }
 
-
 /*
  * Print header for routing table columns.
  */
 void
 pr_rthdr(int af1)
 {
+	printf("pr_rthdr Start\n");
 
 	if (Aflag)
 		printf("%-8.8s ","Address");
@@ -426,6 +430,7 @@
 static struct sockaddr *
 kgetsa(struct sockaddr *dst)
 {
+	printf("kgetsa Start\n");
 
 	if (kget(dst, pt_u.u_sa) != 0)
 		return (NULL);
@@ -435,85 +440,40 @@
 }
 
 static void
-p_tree(struct radix_node *rn)
+p_tree(struct ptree_node *rn)
 {
-
-again:
+	printf("p_tree Start\n");
 	if (kget(rn, rnode) != 0)
 		return;
-	if (!(rnode.rn_flags & RNF_ACTIVE))
-		return;
-	if (rnode.rn_bit < 0) {
 		if (Aflag)
 			printf("%-8.8lx ", (u_long)rn);
-		if (rnode.rn_flags & RNF_ROOT) {
-			if (Aflag)
-				printf("(root node)%s",
-				    rnode.rn_dupedkey ? " =>\n" : "\n");
-		} else if (do_rtent) {
+	if (do_rtent) {
 			if (kget(rn, rtentry) == 0) {
 				p_rtentry(&rtentry);
 				if (Aflag)
 					p_rtnode();
 			}
 		} else {
-			p_sockaddr(kgetsa((struct sockaddr *)rnode.rn_key),
+		p_sockaddr(kgetsa((struct sockaddr *)rnode.key),
 				   NULL, 0, 44);
 			putchar('\n');
 		}
-		if ((rn = rnode.rn_dupedkey))
-			goto again;
-	} else {
 		if (Aflag && do_rtent) {
 			printf("%-8.8lx ", (u_long)rn);
 			p_rtnode();
 		}
-		rn = rnode.rn_right;
-		p_tree(rnode.rn_left);
+	rn = rnode.child[1];
+	p_tree(rnode.child[0]);
 		p_tree(rn);
 	}
-}
 
 char	nbuf[20];
 
 static void
 p_rtnode(void)
 {
-	struct radix_mask *rm = rnode.rn_mklist;
-
-	if (rnode.rn_bit < 0) {
-		if (rnode.rn_mask) {
-			printf("\t  mask ");
-			p_sockaddr(kgetsa((struct sockaddr *)rnode.rn_mask),
-				   NULL, 0, -1);
-		} else if (rm == 0)
-			return;
-	} else {
-		sprintf(nbuf, "(%d)", rnode.rn_bit);
-		printf("%6.6s %8.8lx : %8.8lx", nbuf, (u_long)rnode.rn_left, (u_long)rnode.rn_right);
-	}
-	while (rm) {
-		if (kget(rm, rmask) != 0)
-			break;
-		sprintf(nbuf, " %d refs, ", rmask.rm_refs);
-		printf(" mk = %8.8lx {(%d),%s",
-			(u_long)rm, -1 - rmask.rm_bit, rmask.rm_refs ? nbuf : " ");
-		if (rmask.rm_flags & RNF_NORMAL) {
-			struct radix_node rnode_aux;
-			printf(" <normal>, ");
-			if (kget(rmask.rm_leaf, rnode_aux) == 0)
-				p_sockaddr(kgetsa((struct sockaddr *)rnode_aux.rn_mask),
-				    NULL, 0, -1);
-			else
-				p_sockaddr(NULL, NULL, 0, -1);
-		} else
-		    p_sockaddr(kgetsa((struct sockaddr *)rmask.rm_mask),
-				NULL, 0, -1);
-		putchar('}');
-		if ((rm = rmask.rm_mklist))
-			printf(" ->");
-	}
-	putchar('\n');
+		sprintf(nbuf, "(%d)", rnode.keylen);
+		printf("%6.6s %8.8lx : %8.8lx", nbuf, (u_long)rnode.child[0], (u_long)rnode.child[1]);
 }
 
 static void
@@ -523,6 +483,7 @@
 	int mib[6];
 	char *buf, *next, *lim;
 	struct rt_msghdr *rtm;
+	printf("ntreestuff Start\n");
 
 	mib[0] = CTL_NET;
 	mib[1] = PF_ROUTE;
@@ -550,6 +511,7 @@
 static void
 np_rtentry(struct rt_msghdr *rtm)
 {
+	printf("np_rtentry Start\n");
 	struct sockaddr *sa = (struct sockaddr *)(rtm + 1);
 #ifdef notdef
 	static int masks_done, banner_printed;
@@ -589,6 +551,7 @@
 static void
 p_sockaddr(struct sockaddr *sa, struct sockaddr *mask, int flags, int width)
 {
+	printf("p_sockaddr Start\n");
 	const char *cp;
 
 	cp = fmt_sockaddr(sa, mask, flags);
@@ -606,6 +569,7 @@
 static const char *
 fmt_sockaddr(struct sockaddr *sa, struct sockaddr *mask, int flags)
 {
+	printf("fmt_sockaddr Start\n");
 	static char workbuf[128];
 	const char *cp;
 
@@ -744,6 +708,7 @@
 static const char *
 fmt_flags(int f)
 {
+	printf("fmt_flags Start\n");
 	static char name[33];
 	char *flags;
 	struct bits *p = bits;
@@ -758,6 +723,7 @@
 static void
 p_rtentry(struct rtentry *rt)
 {
+	printf("p_rtenty Start\n");
 	static struct ifnet ifnet, *lastif;
 	static char buffer[128];
 	static char prettyname[128];
@@ -801,8 +767,6 @@
 			    rt->rt_rmx.rmx_expire - uptime.tv_sec) > 0)
 				printf(" %*d", wid_expire, (int)expire_time);
 		}
-		if (rt->rt_nodes[0].rn_dupedkey)
-			printf(" =>");
 	}
 	putchar('\n');
 }
@@ -810,6 +774,7 @@
 char *
 routename(in_addr_t in)
 {
+	printf("routename Start\n");
 	char *cp;
 	static char line[MAXHOSTNAMELEN];
 	struct hostent *hp;
@@ -842,6 +807,7 @@
 static void
 domask(char *dst, in_addr_t addr __unused, u_long mask)
 {
+	printf("domask Start\n");
 	int b, i;
 
 	if (mask == 0 || (!numeric_addr && NSHIFT(mask) != 0)) {
@@ -874,6 +840,7 @@
 char *
 netname(in_addr_t in, u_long mask)
 {
+	printf("netname Start\n");
 	char *cp = 0;
 	static char line[MAXHOSTNAMELEN];
 	struct netent *np = 0;
@@ -902,6 +869,7 @@
 const char *
 netname6(struct sockaddr_in6 *sa6, struct in6_addr *mask)
 {
+	printf("netname6 Start\n");
 	static char line[MAXHOSTNAMELEN];
 	u_char *p = (u_char *)mask;
 	u_char *lim;
@@ -964,6 +932,7 @@
 char *
 routename6(struct sockaddr_in6 *sa6)
 {
+	printf("routename6 Start\n");
 	static char line[MAXHOSTNAMELEN];
 	int flag = 0;
 	/* use local variable for safety */
@@ -990,6 +959,7 @@
 void
 rt_stats(u_long rtsaddr, u_long rttaddr)
 {
+	printf("rt_stats Start\n");
 	struct rtstat rtstat;
 	int rttrash;
 
@@ -1023,6 +993,7 @@
 char *
 ipx_print(struct sockaddr *sa)
 {
+	printf("ipx_print Start\n");
 	u_short port;
 	struct servent *sp = 0;
 	const char *net = "", *host = "";
@@ -1092,6 +1063,7 @@
 char *
 ipx_phost(struct sockaddr *sa)
 {
+	printf("ipx_phost Start\n");
 	struct sockaddr_ipx *sipx = (struct sockaddr_ipx *)sa;
 	struct sockaddr_ipx work;
 	static union ipx_net ipx_zeronet;
