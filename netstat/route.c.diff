--- route.c.org	2010-12-17 04:01:19.000000000 +0900
+++ route.c	2010-12-17 17:28:55.000000000 +0900
@@ -51,7 +51,8 @@
 #include <net/if_var.h>
 #include <net/if_dl.h>
 #include <net/if_types.h>
-#include <net/radix.h>
+#include <net/ptree.h>
+#include <net/ptree_mpath.h>
 #include <net/route.h>
 
 #include <netinet/in.h>
@@ -120,19 +121,18 @@
 int	fibnum;
 int	do_rtent = 0;
 struct	rtentry rtentry;
-struct	radix_node rnode;
-struct	radix_mask rmask;
-struct	radix_node_head **rt_tables;
+struct	ptree_node rnode;
+struct	ptree_node_head **rt_tables;
 
 int	NewTree = 0;
 
 struct	timespec uptime;
 
 static struct sockaddr *kgetsa(struct sockaddr *);
-static void size_cols(int ef, struct radix_node *rn);
-static void size_cols_tree(struct radix_node *rn);
+static void size_cols(int ef, struct ptree_node *rn);
+static void size_cols_tree(struct ptree_node *rn);
 static void size_cols_rtentry(struct rtentry *rt);
-static void p_tree(struct radix_node *);
+static void p_tree(struct ptree_node *);
 static void p_rtnode(void);
 static void ntreestuff(void);
 static void np_rtentry(struct rt_msghdr *);
@@ -150,7 +150,7 @@
 void
 routepr(u_long rtree)
 {
-	struct radix_node_head **rnhp, *rnh, head;
+	struct ptree_node_head **rnhp, *rnh, head;
 	size_t intsize;
 	int i;
 	int numfibs;
@@ -161,7 +161,7 @@
 	if (sysctlbyname("net.fibs", &numfibs, &intsize, NULL, 0) == -1)
 		numfibs = 1;
 	rt_tables = calloc(numfibs * (AF_MAX+1),
-	    sizeof(struct radix_node_head *));
+	    sizeof(struct ptree_node_head *));
 	if (rt_tables == NULL)
 		err(EX_OSERR, "memory allocation failed");
 	/*
@@ -183,7 +183,7 @@
 		}
 
 		if (kread((u_long)(rtree), (char *)(rt_tables), (numfibs *
-		    (AF_MAX+1) * sizeof(struct radix_node_head *))) != 0)
+		    (AF_MAX+1) * sizeof(struct ptree_node_head *))) != 0)
 			return;
 		for (i = 0; i <= AF_MAX; i++) {
 			int tmpfib;
@@ -191,7 +191,7 @@
 				tmpfib = 0;
 			else
 				tmpfib = fibnum;
-			rnhp = (struct radix_node_head **)*rt_tables;
+			rnhp = (struct ptree_node_head **)*rt_tables;
 			/* Calculate the in-kernel address. */
 			rnhp += tmpfib * (AF_MAX+1) + i;
 			/* Read the in kernel rhn pointer. */
@@ -205,14 +205,14 @@
 			if (i == AF_UNSPEC) {
 				if (Aflag && af == 0) {
 					printf("Netmasks:\n");
-					p_tree(head.rnh_treetop);
+					p_tree(head.pnh_top);
 				}
 			} else if (af == AF_UNSPEC || af == i) {
-				size_cols(i, head.rnh_treetop);
+				size_cols(i, head.pnh_top);
 				pr_family(i);
 				do_rtent = 1;
 				pr_rthdr(i);
-				p_tree(head.rnh_treetop);
+				p_tree(head.pnh_top);
 			}
 		}
 	}
@@ -283,7 +283,7 @@
 static int wid_expire;
 
 static void
-size_cols(int ef __unused, struct radix_node *rn)
+size_cols(int ef __unused, struct ptree_node *rn)
 {
 	wid_dst = WID_DST_DEFAULT(ef);
 	wid_gw = WID_GW_DEFAULT(ef);
@@ -299,26 +299,13 @@
 }
 
 static void
-size_cols_tree(struct radix_node *rn)
+size_cols_tree(struct ptree_node *rn)
 {
-again:
 	if (kget(rn, rnode) != 0)
 		return;
-	if (!(rnode.rn_flags & RNF_ACTIVE))
-		return;
-	if (rnode.rn_bit < 0) {
-		if ((rnode.rn_flags & RNF_ROOT) == 0) {
-			if (kget(rn, rtentry) != 0)
-				return;
-			size_cols_rtentry(&rtentry);
-		}
-		if ((rn = rnode.rn_dupedkey))
-			goto again;
-	} else {
-		rn = rnode.rn_right;
-		size_cols_tree(rnode.rn_left);
-		size_cols_tree(rn);
-	}
+	rn = rnode.child[1];
+	size_cols_tree(rnode.child[0]);
+	size_cols_tree(rn);
 }
 
 static void
@@ -435,43 +422,30 @@
 }
 
 static void
-p_tree(struct radix_node *rn)
+p_tree(struct ptree_node *rn)
 {
-
-again:
 	if (kget(rn, rnode) != 0)
 		return;
-	if (!(rnode.rn_flags & RNF_ACTIVE))
-		return;
-	if (rnode.rn_bit < 0) {
-		if (Aflag)
-			printf("%-8.8lx ", (u_long)rn);
-		if (rnode.rn_flags & RNF_ROOT) {
+	if (Aflag)
+		printf("%-8.8lx ", (u_long)rn);
+	if (do_rtent) {
+		if (kget(rn, rtentry) == 0) {
+			p_rtentry(&rtentry);
 			if (Aflag)
-				printf("(root node)%s",
-				    rnode.rn_dupedkey ? " =>\n" : "\n");
-		} else if (do_rtent) {
-			if (kget(rn, rtentry) == 0) {
-				p_rtentry(&rtentry);
-				if (Aflag)
-					p_rtnode();
-			}
-		} else {
-			p_sockaddr(kgetsa((struct sockaddr *)rnode.rn_key),
-				   NULL, 0, 44);
-			putchar('\n');
+				p_rtnode();
 		}
-		if ((rn = rnode.rn_dupedkey))
-			goto again;
 	} else {
-		if (Aflag && do_rtent) {
-			printf("%-8.8lx ", (u_long)rn);
-			p_rtnode();
-		}
-		rn = rnode.rn_right;
-		p_tree(rnode.rn_left);
-		p_tree(rn);
-	}
+		p_sockaddr(kgetsa((struct sockaddr *)rnode.key),
+			   NULL, 0, 44);
+		putchar('\n');
+	}
+	if (Aflag && do_rtent) {
+		printf("%-8.8lx ", (u_long)rn);
+		p_rtnode();
+	}
+	rn = rnode.child[1];
+	p_tree(rnode.child[0]);
+	p_tree(rn);
 }
 
 char	nbuf[20];
@@ -479,41 +453,8 @@
 static void
 p_rtnode(void)
 {
-	struct radix_mask *rm = rnode.rn_mklist;
-
-	if (rnode.rn_bit < 0) {
-		if (rnode.rn_mask) {
-			printf("\t  mask ");
-			p_sockaddr(kgetsa((struct sockaddr *)rnode.rn_mask),
-				   NULL, 0, -1);
-		} else if (rm == 0)
-			return;
-	} else {
-		sprintf(nbuf, "(%d)", rnode.rn_bit);
-		printf("%6.6s %8.8lx : %8.8lx", nbuf, (u_long)rnode.rn_left, (u_long)rnode.rn_right);
-	}
-	while (rm) {
-		if (kget(rm, rmask) != 0)
-			break;
-		sprintf(nbuf, " %d refs, ", rmask.rm_refs);
-		printf(" mk = %8.8lx {(%d),%s",
-			(u_long)rm, -1 - rmask.rm_bit, rmask.rm_refs ? nbuf : " ");
-		if (rmask.rm_flags & RNF_NORMAL) {
-			struct radix_node rnode_aux;
-			printf(" <normal>, ");
-			if (kget(rmask.rm_leaf, rnode_aux) == 0)
-				p_sockaddr(kgetsa((struct sockaddr *)rnode_aux.rn_mask),
-				    NULL, 0, -1);
-			else
-				p_sockaddr(NULL, NULL, 0, -1);
-		} else
-		    p_sockaddr(kgetsa((struct sockaddr *)rmask.rm_mask),
-				NULL, 0, -1);
-		putchar('}');
-		if ((rm = rmask.rm_mklist))
-			printf(" ->");
-	}
-	putchar('\n');
+		sprintf(nbuf, "(%d)", rnode.keylen);
+		printf("%6.6s %8.8lx : %8.8lx", nbuf, (u_long)rnode.child[0], (u_long)rnode.child[1]);
 }
 
 static void
@@ -801,8 +742,6 @@
 			    rt->rt_rmx.rmx_expire - uptime.tv_sec) > 0)
 				printf(" %*d", wid_expire, (int)expire_time);
 		}
-		if (rt->rt_nodes[0].rn_dupedkey)
-			printf(" =>");
 	}
 	putchar('\n');
 }
